import { readFileSync } from 'fs';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import React from "react";
import * as Yup from "yup";
import { Formik, Form, Field, ErrorMessage } from "formik";
import { buildPoseidon } from 'circomlibjs';
import { ethers, providers } from "ethers";
import detectEthereumProvider from "@metamask/detect-provider"
import { rankingToScore } from "../src/stable-matching"


export async function getStaticProps() {
    const contractInfoList = JSON.parse(readFileSync('scripts/contracts-dev.json', {'encoding': 'utf-8'}));
    for (let ci of contractInfoList) {
        ci['artifact'] = JSON.parse(readFileSync(ci['filePath'], {'encoding': 'utf-8'}));
    }
    return { props: { contractInfoList } }
}

export default function Submit({ contractInfoList }) {
  const [logs, setLogs] = React.useState("");

  const validationSchema = Yup.object({
    size: Yup.number().min(3).max(5).required("Please select your matching size"),
    group: Yup.string().required("Please select your group").oneOf(["Man", "Woman"]),
    indexNumber: Yup.number().min(1).required(),  // TODO: how to add max limit N=size?
    secretSalt: Yup.number().min(1).required(),   // TODO: add max limit
    rankingNumberString: Yup.string().matches(/^[,0-9]+$/, 'Type comma-separated numbers from the most preffered.').required(),    // comma separated numbers
  });

  const initialValues = {
    size: '',
    group: '',
    indexNumber: '',
    secretSalt: '',
    rankingNumberString: '',
  };
//   const initialValues = {
//     size: 3,
//     group: 'Man',
//     indexNumber: 1,
//     secretSalt: 123456,
//     rankingNumberString: '1,3,2',
//   };

  const renderError = (message) => <p style={{color: "red"}}>{message}</p>;

  async function submit(N, group, indexNumber, secretSalt, rankingNumberString) {
    //setLogs(`set log in submit; N=${N}, group=${group}, indexNumber=${indexNumber}, secretSalt=${secretSalt}, rankingNumberString=${rankingNumberString}`);
    const index = indexNumber - 1;  // index is from 0 to N-1. (internal representation)
    const offset = (group === 'Man')?  0 : N; // 0 for Men, N for Women.

    // Parse preferenceListString
    const ranking = rankingNumberString.split(',').map(i => parseInt(i) - 1);  // e.g. [0, 2, 1]
    // //const rankingSet = new Set(ranking)
    // //assert( ranking.length == N )   // TODO: this should be checked by Yup
    // //assert( ranking.length == ranking.size )   // execution stucks in assert for some reason ...
    // //assert( preferenceList.every(i => 0 <= i && i < N) )
    if (ranking.length !== N) {
        setLogs(`ERROR: Preffered Partner must include ${N} numbers.`)
        return;
    }
    const score = rankingToScore(ranking)

    // Compute hash   
    const poseidon = await buildPoseidon(); 
    const F = poseidon.F;
    const sHash = F.toObject(poseidon([secretSalt, ...score]));  // secretSalt is string, but it works 
    //setLogs(`sHash = ${sHash}`)

    // Call contract method
    const contractInfo = contractInfoList.filter(i => i['name'] = `Matching${N}`)[0]
    const contractAddress = contractInfo['address']
    const contractArtifact = contractInfo['artifact']

    setLogs('Sign with Metamask Wallet')
    const provider = (await detectEthereumProvider())
    await provider.request({ method: "eth_requestAccounts" })
    const ethersProvider = new providers.Web3Provider(provider)
    const signer = ethersProvider.getSigner()
    const message = await signer.signMessage("Sign this message to commit the hash of your preference ranking.")
    
    const contract = new ethers.Contract(contractAddress, contractArtifact['abi'], signer);
    setLogs("Calling contract...")    
    await contract.commitScoreHash(offset + index, sHash);
    setLogs(`Your hash is commited in the blockchain.\n hash = ${sHash},\n contractAddress = ${contractAddress}`);

  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Submit your preference</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}> Submit your preference ranking!</h1>
        <p className={styles.description}>
            Fill in your index number, secret salt, and preference ranking.
            <br></br>
            (Your ranking is hashed and therefore only visible to the organizer.)
        </p>

        <Formik 
          initialValues={initialValues} 
          validationSchema={validationSchema} 
          onSubmit={async (values, { resetForm }) => {await submit(parseInt(values.size), values.group, values.indexNumber, values.secretSalt, values.rankingNumberString); resetForm()}}
        >
          <Form>            
              <div className="container" style={{width: "100%"}}>

              <div className="field">
                      <label className="label" htmlFor="size"> Matching Size </label>
                      <Field
                          name="size"
                          as="select"
                          className="select"
                          placeholder=""
                      >
                        <option value={""}>Select size</option>
                        <option value={3}>3</option>
                        <option value={4}>4</option>
                        <option value={4}>5</option>
                      </Field>                    
                      <ErrorMessage name="size" render={renderError} />
                  </div>

                  <div className="field">
                      <label className="label" htmlFor="group"> Your Group </label>
                      <Field
                          name="group"
                          as="select"
                          className="select"
                          placeholder=""
                      >
                        <option value={""}>Select group</option>
                        <option value={"Man"}>Man</option>
                        <option value={"Woman"}>Woman</option>
                      </Field>                    
                      <ErrorMessage name="group" render={renderError} />
                  </div>

                  <div className="field">
                      <label className="label" htmlFor="indexNumber"> Your Index Number </label>
                      <Field
                          name="indexNumber"
                          type="number"
                          className="input"
                          placeholder="e.g. 2"
                      />
                      <ErrorMessage name="indexNumber" render={renderError} />
                  </div>     

                  <div className="field">
                      <label className="label" htmlFor="secretSalt"> Your Secret Salt Number </label>
                      <Field
                          name="secretSalt"
                          type="text"
                          className="input"
                          placeholder="e.g. 12774367769825274767468634682317838448486152426"
                      />
                      <ErrorMessage name="key" render={renderError} />
                  </div>    

                  <div className="field">
                      <label className="label" htmlFor="rankingNumberString"> Your Preffered Partner Index Numbers (from best to worst) </label>
                      <Field
                          name="rankingNumberString"
                          type="text"
                          className="input"
                          placeholder="e.g. 2,1,3"
                      />
                      <ErrorMessage name="rankingNumberString" render={renderError} />
                  </div>                  

              </div>

              {/* 
              */}

              <p></p>       
              <button type="submit" className={styles.button}> Submit </button>

              <div className={styles.logs}>{logs}</div>  
          </Form>
         </Formik>

        



      </main>


    </div>
  )
}
