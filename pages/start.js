import { readFileSync } from 'fs';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import React from "react";
import * as Yup from "yup";
import { Formik, Form, Field, ErrorMessage } from "formik";
import { buildPoseidon } from 'circomlibjs';
import { ethers, providers } from "ethers";
import detectEthereumProvider from "@metamask/detect-provider"
import { getContractArtifact } from "../src/contract-utils"
const groth16  = require("snarkjs").groth16;

export async function getStaticProps() {
    const contractInfoList = JSON.parse(readFileSync('deployed-contracts/harmony-dev.json', {'encoding': 'utf-8'}));
    for (let ci of contractInfoList) {
        ci['artifact'] = getContractArtifact(ci['name']);
    }
    return { props: { contractInfoList } }
}

export default function Register({ contractInfoList }) {
  const [logs, setLogs] = React.useState("");
  const [logs2, setLogs2] = React.useState("");

  const validationSchema = Yup.object({
    size: Yup.number().min(3).max(5).required("Please select your matching size"),
  });

  const initialValues = {
    size: '',
  };
  // const initialValues = {
  //   size: 3,
  // };  

  const renderError = (message) => <p style={{color: "red"}}>{message}</p>;

  async function start(N) {
    const contractInfo = contractInfoList.filter(i => i['name'] = `Matching${N}Factory`)[0]
    const contractAddress = contractInfo['address']
    const contractArtifact = contractInfo['artifact']
    const poseidon = await buildPoseidon();

    // Create contract
    setLogs('Sign with Metamask Wallet')
    const provider = (await detectEthereumProvider())
    await provider.request({ method: "eth_requestAccounts" })
    const ethersProvider = new providers.Web3Provider(provider)
    const signer = ethersProvider.getSigner()
    const message = await signer.signMessage("Sign this message to create a matching contract.")    
     
    // const provider = new ethers.providers.JsonRpcProvider("http://localhost:8545");
    // const signer = new ethers.Wallet("0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80", provider);  

    const contract = new ethers.Contract(contractAddress, contractArtifact['abi'], signer);

    // Confirmation
    setLogs(`Waiting for confirmation...`)   
    const tx = await contract.createMatching();
    const receipt = await tx.wait();

    // Parse receipt
    const createEventList = receipt.logs.map((log) => contract.interface.parseLog(log))
    if (createEventList.length == 1 ) {
      const senderAddress = createEventList[0]['args']['senderAddress']; 
      const eventAddress = createEventList[0]['args']['eventAddress'];   
      setLogs("")
      setLogs2(`Matching Event Address: ${eventAddress}`);
    } else {
      setLogs("Something Went wrong...")
    }

  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Start Matching</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}> Start a Matching Event</h1>
        <p className={styles.description}>
            Share the generated Matching Event address with participants.
        </p>

        <Formik 
          initialValues={initialValues} 
          validationSchema={validationSchema} 
          onSubmit={async (values, { resetForm }) => {await start(parseInt(values.size)); resetForm()}}
        >
          <Form>            
              <div className="container" style={{width: "100%"}}>

              <div className="field">
                      <label className="label" htmlFor="size"> Matching Size </label>
                      <Field
                          name="size"
                          as="select"
                          className="select"
                          placeholder=""
                      >
                        <option value={""}>Select size</option>
                        <option value={3}>3</option>
                        <option value={4}>4</option>
                        <option value={4}>5</option>
                      </Field>                    
                      <ErrorMessage name="size" render={renderError} />
                  </div>
                                                                                                        
              </div>
              <p></p>       
                                    
              <button type="submit" className={styles.button}> Start </button>

              <div className={styles.logs}>{logs}</div>  
              <h4 className={styles.logs}>{logs2}</h4>  
          </Form>
         </Formik>
    
      </main>
    </div>
  )
}
